name: "Determine next tag from PR body"
description: "Determine next tag from PR body"

inputs:
  pr_body:
    description: |
      Body of pull request if inside a pull request
    required: false

  pr_number:
    description: |
      Pull request number
    required: false

# Expose step outputs as job outputs
outputs:
  current_tag:
    description: "Current tag version"
    value: ${{ steps.determine_current_tag.outputs.current_tag }}
  new_tag:
    description: "Next tag version"
    value: ${{ steps.determine_next_tag.outputs.new_tag }}

runs:
  using: "composite"

  steps:
    - name: Set GitHub Path
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH

    - uses: actions/checkout@v4
    - uses: fregante/setup-git-user@v2

    - name: Determine new tag version from PR event
      if: ${{ inputs.pr_body != '' && inputs.pr_number != '' }}
      shell: bash
      id: determine_next_tag_from_pr_event
      # User controlled input needs to be santitised beforehand e.g., by adding an
      # intermediate env var to prevent the workflow being exposed to a critical
      # command injection attack
      env:
        PR_BODY: "${{ inputs.pr_body }}"
        PR_NUMBER: "${{ inputs.pr_number }}"
      run: |
        echo "Determining whether user has selected an auto-tag option..."
        script_output=$("${{ github.action_path }}/auto-tag.sh" "${PR_BODY}")
        if $? != 0; then
          exit 1
        fi
        new_tag=$(echo "${script_output}" | tail -n 1)
        echo "New tag: ${new_tag}"
        echo "new_tag=${new_tag}"  >> "$GITHUB_OUTPUT"

    - uses: actions/github-script@v7
      if: ${{ (inputs.pr_body == '' && inputs.pr_number == '') }}
      id: get_pr_data
      with:
        script: |
          return (
            await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
          ).data[0];

    - name: Set PR body as env var 1
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        echo "env2=${{ steps.get_pr_data.outputs.result }}" >> "$GITHUB_ENV"
        echo "${env2}"

    - name: Set PR body as env var 2
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        echo "env1=\"${{ steps.get_pr_data.outputs.result }}\"" >> "$GITHUB_ENV"
        echo "${env1}"

    - name: Set PR body as env var 3
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        echo "::set-env name=env3::$(echo ${{ steps.get_pr_data.outputs.result }} | awk '/^## Proposed version/,/^Notes:/ {if (!/^## Proposed version/ && !/^Notes:/) print}')"
        echo "${env3}"

    - name: Set PR body as env var 3
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        echo "env3=$(echo ${{ fromJson(steps.get_pr_data.outputs.result).body }} | awk '/^## Proposed version/,/^Notes:/ {if (!/^## Proposed version/ && !/^Notes:/) print}')"  >> "$GITHUB_ENV"
        echo "${env3}"

    - name: Set PR body as a multiline env var unquoted
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        {
          echo 'JSON_RESPONSE'<<EOF
          ${{ steps.get_pr_data.outputs.result }}
          EOF
        } >> "$GITHUB_ENV"
        echo "${JSON_RESPONSE}"
      
    - name: Set PR body as a multiline env var unquoted
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        {
          echo JSON_RESPONSE<<EOF
          ${{ steps.get_pr_data.outputs.result }}
          EOF
        } >> "$GITHUB_ENV"
        echo "${JSON_RESPONSE}"

    - name: Set PR body as a multiline env var unquoted
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        {
          echo 'JSON_RESPONSE<<EOF'
          ${{ steps.get_pr_data.outputs.result }}
          EOF
        } >> "$GITHUB_ENV"
        echo "${'JSON_RESPONSE}"

    - name: Set PR body as a multiline env var quoted
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      run: |
        {
          echo 'JSON_RESPONSE<<EOF'
          "${{ steps.get_pr_data.outputs.result }}"
          EOF
        } >> "$GITHUB_ENV"
        echo "${'JSON_RESPONSE}"

    - name: Determine new tag version
      if: ${{ always() && (inputs.pr_body == '' && inputs.pr_number == '') && steps.get_pr_data.outputs.result && (fromJSON(steps.get_pr_data.outputs.result).number && fromJSON(steps.get_pr_data.outputs.result).body) }}
      shell: bash
      id: determine_next_tag_retrospectively
      env:
        pr_dump_file: "./tmp_pr_body_dump.txt"
      run: |
        echo "Debug dump"

        if [[ "${{contains(format(fromJSON('"{0}"'), fromJson(steps.get_pr_data.outputs.result).body), fromJSON('"`"'))}}" = 'true' ]]; then
          echo "PR body contains special characters."

          text="${text//$'%'/%25}"
          text="${text//$'\n'/%0A}"
          text="${text//$'\r'/%0D}"
          echo "::set-env name=escaped::$text"

          echo "Result double quote"
          echo "${{ steps.get_pr_data.outputs.result }}"
          echo "JSON Result double quote"
          echo "${{ fromJson(steps.get_pr_data.outputs.result) }}"
          echo "JSON Result body double quote"
          echo "${{ fromJson(steps.get_pr_data.outputs.result).body }}"
          echo "Result no quote"
          echo ${{ steps.get_pr_data.outputs.result }}
          echo "JSON Result no quote"
          echo ${{ fromJson(steps.get_pr_data.outputs.result) }}

          echo "Dumping PR body to file..."
          rm -f "${pr_dump_file}"
          touch "${pr_dump_file}"
          pr_body="${{ fromJson(steps.get_pr_data.outputs.result).body }}"
          cat > "${pr_dump_file}" <<EOF
          "${pr_body}"
          EOF

          echo "Cat-ting ${pr_dump_file}..."
          cat "${pr_dump_file}"
          PR_BODY="${pr_dump_file}"

        else
          echo "PR body doesn't contain any special characters."
          PR_BODY="${{ fromJson(steps.get_pr_data.outputs.result).body }}"
        fi

        echo "Determining whether user selected an auto-tag option..."
        PR_NUMBER=${{ fromJson(steps.get_pr_data.outputs.result).number }}
        script_output=$("${{ github.action_path }}/auto-tag.sh" "${PR_BODY}")
        if $? != 0; then
          exit 1
        fi
        new_tag=$(echo "${script_output}" | tail -n 1)
        echo "New tag: ${new_tag}"
        echo "new_tag=${new_tag}"  >> "$GITHUB_OUTPUT"

    - name: Set new_tag
      shell: bash
      id: determine_next_tag
      run: |
        echo "Outputting new tag..."
        if [[ ${{ (inputs.pr_body != '' && inputs.pr_number != '') }} == true ]]; then
            echo "PR body and number present. Using new_tag from 'determine_next_tag_from_pr_event'"
            echo "new_tag=${{ steps.determine_next_tag_from_pr_event.outputs.new_tag }}"  >> "$GITHUB_OUTPUT"
        elif [[ ${{ (inputs.pr_body == '' && inputs.pr_number == '') }} == true ]]; then
            echo "PR body and number not present. Using new_tag from 'determine_next_tag_retrospectively'"
            echo "new_tag=${{ steps.determine_next_tag_retrospectively.outputs.new_tag }}"  >> "$GITHUB_OUTPUT"
        else
            echo "PR body or number present. Either both or neither must be passed."
        fi

    - name: Determine current tag
      id: determine_current_tag
      shell: bash
      run: |
        source "${{ github.action_path }}/funcs.sh"
        current_tag=$(get_latest_tag)
        if [[ -z "${current_tag}" ]]; then
          exit 1;
        else
          echo "Current tag: ${current_tag}"
          echo "current_tag=${current_tag}"  >> "$GITHUB_OUTPUT"
        fi
