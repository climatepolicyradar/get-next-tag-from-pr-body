name: "Determine next tag from PR body"
description: "Determine next tag from PR body"

inputs:
  PR_BODY:
    description: |
      Body of pull request if inside a pull request
    required: false
    # default: ""

  PR_NUMBER:
    description: |
      Pull request number
    required: false
    # default: ""

# Expose step outputs as job outputs
outputs:
  new_tag:
    description: "Next tag version"
    value: ${{ steps.determine_next_tag.outputs.new_tag }}

runs:
  using: "composite"

  steps:
    - name: Debug
      shell: sh
      run: |
        echo ${{ inputs['PR_BODY'] }}
        echo ${{ inputs['PR_NUMBER'] }}
        echo ${{ inputs.PR_BODY }}
        echo ${{ inputs.PR_NUMBER }}
        echo ${{ inputs.PR_BODY == '' && inputs.PR_NUMBER == ''}}

    - uses: actions/github-script@v7
      if: ${{ inputs.PR_BODY == '' && inputs.PR_NUMBER == '' }}
      id: get_pr_data
      with:
        script: |
          return (
            await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
          ).data[0];

    - uses: actions/checkout@v4
    - uses: fregante/setup-git-user@v2

    - name: Determine new tag version from PR event
      if: ${{ inputs.PR_BODY != '' && inputs.PR_NUMBER != ''}}
      shell: sh
      id: determine_next_tag_from_pr_event
      run: |
        echo "Checking whether tag version can be determined from PR body..."
        script_output=$("${{ github.action_path }}/auto-tag.sh" "${{ inputs.PR_BODY }}" "${{ inputs.PR_NUMBER }}")
        if $? != 0; then
          exit 1
        fi
        new_tag=$(echo "${script_output}" | tail -n 1)
        echo "New tag: ${new_tag}"
        echo "new_tag=${new_tag}"  >> "$GITHUB_OUTPUT"

    - name: Determine new tag version
      if: ${{ inputs.PR_BODY == '' && inputs.PR_NUMBER == '' }}
      shell: sh
      id: determine_next_tag
      # User controlled input needs to be santitised beforehand e.g., by adding an
      # intermediate env var to prevent the workflow being exposed to a critical
      # command injection attack
      env:
        PR_BODY_FROM_JSON: "${{ fromJson(steps.get_pr_data.outputs.result).body }}"
        PR_NUMBER_FROM_JSON: "${{ fromJson(steps.get_pr_data.outputs.result).number }}"
      run: |
        echo "Attempting to auto-tag merge commit"
        script_output=$("${{ github.action_path }}/auto-tag.sh" "${PR_BODY_FROM_JSON}" "${PR_NUMBER_FROM_JSON}")
        if $? != 0; then
          exit 1
        fi
        new_tag=$(echo "${script_output}" | tail -n 1)
        echo "New tag: ${new_tag}"
        echo "new_tag=${new_tag}"  >> "$GITHUB_OUTPUT"
